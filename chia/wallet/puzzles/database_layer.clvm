(mod (
  DB_LAYER_MOD_HASH  ; This mod file - used to update our state
  CURRENT_STATE  ; 32 byte merkle root
  INNER_PUZZLE  ; Our inner inner puzzle
  spend_type
  my_puzhash
  my_amount
  inner_solution
)

  ; spend_type 0 is REPORT current state
  ; spend_type 1 is UPDATE the current state
  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)

  ; takes a lisp tree and returns the hash of it
     (defun sha256tree1 (TREE)
           (if (l TREE)
               (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
               (sha256 1 TREE)
            )
      )

  ; return the puzzle hash for a db_layer with the given CURRENT_STATE and inner_puzzle_hash
    (defun db_layer_puzzle_hash (DB_LAYER_MOD_HASH new_state inner_puzzle_hash)
      (puzzle-hash-of-curried-function DB_LAYER_MOD_HASH
                                       inner_puzzle_hash
                                       (sha256 1 new_state)
                                       (sha256 1 DB_LAYER_MOD_hash)
      )
    )

  (defun process_innerpuz_results (DB_LAYER_MOD_HASH (new_state new_inner_puzhash conditions) my_amount)
    (c (list CREATE_PUZZLE_ANNOUNCEMENT new_state) (c (list CREATE_COIN (db_layer_puzzle_hash DB_LAYER_MOD_HASH new_state new_inner_puzhash) my_amount) (c (list ASSERT_MY_AMOUNT my_amount) conditions)))
  )

  (if spend_type
    ; REPORT
    (list (list CREATE_PUZZLE_ANNOUNCEMENT CURRENT_STATE) (list CREATE_COIN my_puzhash my_amount) (list ASSERT_MY_PUZZLEHASH my_puzhash) (list ASSERT_MY_AMOUNT my_amount))
    ; UPDATE
    (process_innerpuz_results DB_LAYER_MOD_HASH (a INNER_PUZZLE inner_solution) my_amount)
  )
)
