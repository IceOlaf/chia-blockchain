(mod (
    NFT_STATE_LAYER_MOD_HASH
    METADATA
    METADATA_UPDATER_PUZZLE_HASH
    INNER_PUZZLE
    solution  ; either to inner puzzle or metadata updater
    my_amount
  )

  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)

  (defun sha256tree1
         (TREE)
         (if (l TREE)
             (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
             (sha256 1 TREE)
         )
  )

  (defun-inline nft_state_layer_puzzle_hash (NFT_STATE_LAYER_MOD_HASH METADATA METADATA_UPDATER_PUZZLE_HASH inner_puzzle_hash)
    (puzzle-hash-of-curried-function NFT_STATE_LAYER_MOD_HASH
                                     inner_puzzle_hash
                                     (sha256 ONE METADATA_UPDATER_PUZZLE_HASH)
                                     (sha256tree1 METADATA)
                                     (sha256 ONE NFT_STATE_LAYER_MOD_HASH)
    )
  )

  (defun wrap_odd_create_coins (NFT_STATE_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH (METADATA conditions) my_amount)
    (if conditions
      (if (= (f (f conditions)) CREATE_COIN)
        (if (logand (f (r (r (f conditions)))) ONE)
          (c (list CREATE_COIN (nft_state_layer_puzzle_hash NFT_STATE_LAYER_MOD_HASH METADATA METADATA_UPDATER_PUZZLE_HASH (f (r (f conditions)))) my_amount) (r conditions))
          (c (f conditions) (wrap_odd_create_coins NFT_STATE_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH (list METADATA (r conditions)) my_amount))
        )
        (c (f conditions) (wrap_odd_create_coins NFT_STATE_LAYER_MOD_HASH METADATA_UPDATER_PUZZLE_HASH (list METADATA (r conditions)) my_amount))
      )
      ()
    )
  )

  (defun cons_to_second (item list_of_items)
    (c (f list_of_items) (c item (f (r list_of_items))))
  )

  (defun check_for_metadata_prog_reveal (METADATA_UPDATER_PUZZLE_HASH CURRENT_METADATA conditions_loop all_conditions)
    (if conditions_loop
      (if (= (f (f conditions_loop)) -24)
        (if (= (sha256tree1 (f (r (f conditions_loop)))) METADATA_UPDATER_PUZZLE_HASH)
          ()
          (x)
        )
        (check_for_metadata_prog_reveal METADATA_UPDATER_PUZZLE_HASH CURRENT_METADATA (r conditions_loop) all_conditions)
      )
      (list CURRENT_METADATA 0)
    )
  )

  (defun metadata_updater_loader (CURRENT_METADATA conditions)
    (check_for_metadata_prog_reveal CURRENT_METADATA conditions conditions)
  )

  ; main
  (c
    (list ASSERT_MY_AMOUNT my_amount)
    (wrap_odd_create_coins
      NFT_STATE_LAYER_MOD_HASH
      METADATA_UPDATER_PUZZLE_HASH
      (metadata_updater_loader
       METADATA_UPDATER_PUZZLE_HASH METADATA (a INNER_PUZZLE solution)
      )
      my_amount
    )
  )
)
