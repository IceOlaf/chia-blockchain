(mod
    (
        ; NFT Singleton ID
        NFT_ID
        ; SINGLETON_STRUCT is ((SINGLETON_MOD_HASH, (SINGLETON_LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))
        SINGLETON_STRUCT
        ; DID of the current owner
        CURRENT_OWNER
        ; Royalty program puzzle hash
        ROYALTY_PROG_PUZHASH
        ; DID inner puzzle hash of the current owner
        current_did_puzhash
        ; New NFT owner's DID
        new_owner
        ; DID inner puzzle hash of the new owner
        new_did_puzhash
        ; Royalty program puzzle reveal
        royalty_prog_reveal
        ; Royalty program solution
        royalty_prog_solution
    )

    (include condition_codes.clvm)
    (include curry-and-treehash.clinc)
    (include sha256tree.clib)
    (defconstant CHANGE_OWNERSHIP -22)

    ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
    ; puzzle-hash-of-curried-function is imported from curry-and-treehash.clinc
    (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
       (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
                                        inner_puzzle_hash
                                        (sha256tree SINGLETON_STRUCT)
       )
    )

    ; main
    (list
        (c (list CHANGE_OWNERSHIP new_owner)
            (c (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash SINGLETON_STRUCT current_did_puzhash) (sha256tree royalty_prog_solution) new_owner))
                (c (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash (c (f SINGLETON_STRUCT) (c new_did (r (r SINGLETON_STRUCT)))) new_did_puzhash) (sha256tree royalty_prog_solution)))
                    (a royalty_prog_reveal royalty_prog_solution)
                )
            )
        )
    )
)
